-- High-level Intermediary Representation
--
-- The HIR is the AST embedded with semantic information from sema().
-- ASDL converts this file into an abstract Visitor class.

module HIR
{
  mod = Module(stmt* body, string? docstring)

  stmt = FunctionDef(identifier name, declaration* args, stmt* body,
                     expr? explicit_rettype, string? docstring,
                     datatype rettype, size_t traits)
       | GenericFunctionDef(stmt original_func, stmt* instantiated_funcs)
       | DataDef(identifier name, declaration* body, size_t scope)
       | Return(expr? value, expr? comptime_literal)
       | If(expr test, stmt* body, stmt* orelse)
       | While(expr test, stmt* body)
       | Import(alias* names)
       | ImportFrom(identifier module, alias* names)
       | Decl(decltype dt, declaration* decls)
       | Assign(expr target, expr value)
       | Del(expr* target)
       | Expr(expr value)

  expr = Query(expr table, querytype qt, alias* cols, alias* by, expr? where,
               datatype by_type)
       | Sort(expr table, alias* by, datatype by_type)
       | Join(expr left, expr right, alias* left_on, alias* right_on,
              datatype? left_on_type, datatype? right_on_type,
              alias? left_asof, alias? right_asof, bool strict,
              direction direction, expr? within,
              datatype right_remaining_type)
       | UnaryOp(identifier op, expr operand, resolved ref)
       | BinOp(expr left, identifier op, expr right, resolved ref)
       | FunctionCall(expr func, expr* args)
       | TemplateInst(expr value, expr* args, stmt* resolutions)
       | TypeOf(expr arg, string s)
       | TraitsOf(expr arg, string s)
       | ModeOf(expr arg, string s)
       | Columns(expr arg, string s)
       | Member(expr value, identifier member, resolved ref)
       | Subscript(expr value, slice slice)
       | UserDefinedLiteral(expr literal, identifier suffix, resolved ref)
       | IntegerLiteral(int64_t n)
       | FloatingLiteral(double n)
       | BoolLiteral(bool b)
       | Str(string s)
       | Char(char c)
       | Id(identifier s, resolved ref)
       | ImpliedMember(identifier s, resolved ref, expr implied_value)
       | OverloadedId(identifier s, resolved* refs)
       | List(expr* values)
       | Paren(expr subexpr)
       attributes(datatype? type, size_t traits, compmode mode,
                  identifier? name)

  slice = Slice(expr? lower, expr? upper, expr? step)
        | Index(expr value)

  alias = (expr value, identifier? name)

  declaration = (identifier name, expr? explicit_type, expr? value,
                 decltype dt, datatype type, size_t traits, compmode mode,
                 expr? comptime_literal, size_t offset)

  decltype = Let | Var

  querytype = Select | Exec

  direction = Default | Backward | Forward | Nearest

  compmode = Normal | Stream | Comptime

  datatype = VVMType(size_t t)
           | UDT(identifier s, resolved ref)
           | Array(datatype type)
           | FuncType(datatype* argtypes, datatype rettype, size_t traits)
           | Kind(datatype type)
           | Void

  resolved = DeclRef(declaration ref)
           | FuncRef(stmt ref)
           | GenericFuncRef(stmt ref)
           | DataRef(stmt ref)
           | ModRef(mod ref)
           | VVMOpRef(size_t opcode, datatype type)
           | VVMTypeRef(size_t t)
           | CompilerRef(size_t code, datatype type)
           | SemaRef(size_t code, datatype type)
}
